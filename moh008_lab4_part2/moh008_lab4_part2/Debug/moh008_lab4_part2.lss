
moh008_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000020a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a0  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e7  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f9  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000424  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	64 d0       	rcall	.+200    	; 0x172 <main>
  aa:	73 c0       	rjmp	.+230    	; 0x192 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Cntr_SM_Tick>:
unsigned char tmpC = 0x00;
unsigned char A = 0x00;

void Cntr_SM_Tick()
{//state transition
	switch(state)
  ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	31 f1       	breq	.+76     	; 0x102 <Cntr_SM_Tick+0x54>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <Cntr_SM_Tick+0x14>
  b8:	88 23       	and	r24, r24
  ba:	41 f0       	breq	.+16     	; 0xcc <Cntr_SM_Tick+0x1e>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	69 f0       	breq	.+26     	; 0xda <Cntr_SM_Tick+0x2c>
  c0:	40 c0       	rjmp	.+128    	; 0x142 <Cntr_SM_Tick+0x94>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	61 f1       	breq	.+88     	; 0x11e <Cntr_SM_Tick+0x70>
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	c1 f1       	breq	.+112    	; 0x13a <Cntr_SM_Tick+0x8c>
  ca:	3b c0       	rjmp	.+118    	; 0x142 <Cntr_SM_Tick+0x94>
	{
		case Init:
		tmpC = 0x07;
  cc:	87 e0       	ldi	r24, 0x07	; 7
  ce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		state = Release;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
  d8:	08 95       	ret
		
		case Release:
		if(A == 0x01)
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	21 f4       	brne	.+8      	; 0xea <Cntr_SM_Tick+0x3c>
		{
			state = Inc;
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
  e8:	3a c0       	rjmp	.+116    	; 0x15e <Cntr_SM_Tick+0xb0>
		}
		else if(A == 0x02)
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	21 f4       	brne	.+8      	; 0xf6 <Cntr_SM_Tick+0x48>
		{
			state = Dec;
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
  f4:	39 c0       	rjmp	.+114    	; 0x168 <Cntr_SM_Tick+0xba>
		}
		else if(A == 0x03)
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	d9 f5       	brne	.+118    	; 0x170 <Cntr_SM_Tick+0xc2>
		{
			state = zero;
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 100:	2b c0       	rjmp	.+86     	; 0x158 <Cntr_SM_Tick+0xaa>
			state = Release;
		}
		break;
		
		case Inc:
		if(A == 0x03)
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	21 f4       	brne	.+8      	; 0x112 <Cntr_SM_Tick+0x64>
		{
			state = zero;
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 110:	23 c0       	rjmp	.+70     	; 0x158 <Cntr_SM_Tick+0xaa>
		}
		else if(A == 0x01)
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	21 f1       	breq	.+72     	; 0x15e <Cntr_SM_Tick+0xb0>
		{
			state = Inc;
		}
		else
		{
			state = Release;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 11c:	08 95       	ret
		}
		break;
		
		case Dec:
		if(A == 0x03)
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	21 f4       	brne	.+8      	; 0x12e <Cntr_SM_Tick+0x80>
		{
			state = zero;
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 12c:	15 c0       	rjmp	.+42     	; 0x158 <Cntr_SM_Tick+0xaa>
		}
		else if(A == 0x02)
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	d9 f0       	breq	.+54     	; 0x168 <Cntr_SM_Tick+0xba>
		{
			state = Dec;
		}
		else
		{
			state = Release;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 138:	08 95       	ret
		}
		break;
		
		case zero:
		state = Release;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
 140:	08 95       	ret
		
		default:
		state = Init;
 142:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
		break;
 146:	08 95       	ret
		{
			break;
		}
		else
		{
			tmpC++;
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		}
		break;
 14e:	08 95       	ret
		{
			break;
		}
		else
		{
			tmpC--;
 150:	81 50       	subi	r24, 0x01	; 1
 152:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		break;
		
		default:
		break;
	}
}
 156:	08 95       	ret
			tmpC--;
		}
		break;
		
		case zero:
		tmpC = 0x00;
 158:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tmpC>
		break;
 15c:	08 95       	ret
		
		case Release:
		break;
		
		case Inc:
		if(tmpC == 0x09)
 15e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 162:	89 30       	cpi	r24, 0x09	; 9
 164:	89 f7       	brne	.-30     	; 0x148 <Cntr_SM_Tick+0x9a>
 166:	08 95       	ret
			tmpC++;
		}
		break;
		
		case Dec:
		if(tmpC == 0x00)
 168:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 16c:	81 11       	cpse	r24, r1
 16e:	f0 cf       	rjmp	.-32     	; 0x150 <Cntr_SM_Tick+0xa2>
 170:	08 95       	ret

00000172 <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 172:	11 b8       	out	0x01, r1	; 1
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 178:	87 b9       	out	0x07, r24	; 7
 17a:	18 b8       	out	0x08, r1	; 8
	
	state = Init;
 17c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
	
	while (1)
	{
		A = PINA & 0x03;
 180:	80 b1       	in	r24, 0x00	; 0
 182:	83 70       	andi	r24, 0x03	; 3
 184:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		Cntr_SM_Tick();
 188:	92 df       	rcall	.-220    	; 0xae <Cntr_SM_Tick>
		PORTC = tmpC;
 18a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 18e:	88 b9       	out	0x08, r24	; 8
 190:	f7 cf       	rjmp	.-18     	; 0x180 <main+0xe>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
